# --------------------- Current process for adding tests ----------------------
# 1. Create test file in tests directory, or add to already existing file
# 2. If creating new file, add to TESTS variable below.
# 3. Add instructions for how to create test. Assuming you're testing source:
#   a. Add command to create source objects first
#   b. Add to compile command all objects needed by the test
# -----------------------------------------------------------------------------

# SYNOPSIS:
#
#   make all   - makes all tests.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Don't tweak the GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR=googletest/googletest

# Flags passed to the preprocessor.
# Set Google Test's header directory as a system directory, such that
# the compiler doesn't generate warnings in Google Test headers.
CPPFLAGS += -isystem $(GTEST_DIR)/include

# Flags passed to the C++ compiler.
CXXFLAGS += -g -Wextra -pthread -std=c++20

# Test files' make constants
T_PATH          := src
T_BUILD_PATH    := build
TESTS           := $(wildcard $(T_PATH)/*.cpp)
TEST_OBJ        := $(patsubst $(T_PATH)/%.cpp,$(T_BUILD_PATH)/%.o,$(TESTS))
TEST_INCLUDES   := $(addprefix -I,$(T_PATH))

# All source code modules 
MODULES   := buildings \
						 buildings/factories \
						 buildings/producers \
						 common \
						 players \
						 portables \
						 portables/resources \
						 portables/transporters \
						 portables/transporters/land \
						 portables/transporters/sea \
						 tiles \
						 tiles/components \
						 utils
S_PATH       := ../src
S_BUILD_PATH := ../build
SRC_DIR      := $(addprefix $(S_PATH)/,$(MODULES))   # Searches src/* for .h/.cpp files
BUILD_DIR    := $(addprefix $(S_BUILD_PATH)/,$(MODULES)) # Recreates build dir to match src
SRC          := $(foreach sdir,$(SRC_DIR),$(wildcard $(sdir)/*.cpp))
OBJ          := $(patsubst $(S_PATH)/%.cpp,$(S_BUILD_PATH)/%.o,$(SRC))
INCLUDES     := $(addprefix -I,$(S_PATH))
LIBS         := $(addprefix -I,../libs)

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(wildcard $(GTEST_DIR)/include/gtest/*.h) \
                $(wildcard $(GTEST_DIR)/include/gtest/internal/*.h)

# House-keeping build targets.
.PHONY : all checkdirs clean src

all : checkdirs test_runner

checkdirs:
	@mkdir -p $(T_BUILD_PATH)

clean :
	@rm -f $(T_BUILD_PATH)/*.o $(T_BUILD_PATH)/*.a $(T_BUILD_PATH)/*.exe

src :
	$(MAKE) -C ../

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
$(T_BUILD_PATH)/gtest-all.o : $(GTEST_SRCS_)
	@mkdir -p $(T_BUILD_PATH)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc -o $@

$(T_BUILD_PATH)/gtest_main.o : $(GTEST_SRCS_)
	@mkdir -p $(T_BUILD_PATH)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc -o $@

$(T_BUILD_PATH)/gtest.a : $(T_BUILD_PATH)/gtest-all.o
	@mkdir -p $(T_BUILD_PATH)
	$(AR) $(ARFLAGS) $@ $^

$(T_BUILD_PATH)/gtest_main.a : $(T_BUILD_PATH)/gtest-all.o $(T_BUILD_PATH)/gtest_main.o
	@mkdir -p $(TEST_BUILD_PATH)
	$(AR) $(ARFLAGS) $@ $^

test_runner : checkdirs src $(T_BUILD_PATH)/gtest-all.o
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(INCLUDES) $(LIBS) \
	$(TEST_INCLUDES) \
	$(OBJ) \
	$(T_BUILD_PATH)/gtest-all.o \
	$(TESTS) \
	test_runner.cpp	-o $(T_BUILD_PATH)/rb_test
	./$(T_BUILD_PATH)/rb_test.exe

# --------------------- BUILDING INDIVIDUAL TESTS -----------------------------
# Make commands to build a single test can be added here.
# A test should link with either gtest.a or gtest_main.a, depending on whether
# it defines its own main() function.
# Alternatively, running the test_runner executable with
# --gtest_filter='<Regex to filter by test name>' runs only the selected tests.